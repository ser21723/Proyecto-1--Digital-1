module cuenta_creditos (input C, clk, reset, output reg a,b,c,d);
    reg [3:0] state, next_state;
    // Estados según la cantidad de créditos
    parameter S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010; S3= 4'b0011; S4= 4'b0100; S5= 4'b0101;
    
    // Nube combinacional para calcular el estado futuro y salidas

    always @ (C or state) begin
        case (state)
            S0: begin
		    if (C == 1); 
                        next_state <= S1; 
		    else begin
                        next_state <= S0;
	            		    	 end
                end
		
            S1: begin
	     	    if (C == 1); 
                        next_state <= S2; 
		    else begin
                        next_state <= S1;
	            		    	 end
                end

            S2: begin
	     	    if (C == 1); 
                        next_state <= S3; 
		    else begin
                        next_state <= S2;
	            		    	 end
                end
		
	    S3: begin
	     	    if (C == 1); 
                        next_state <= S4; 
		    else begin
                        next_state <= S3;
	            		    	 end
                end
		
	    S4: begin
	     	   if (C == 1); 
                    next_state <= S0;
                   end
		
            default: 
	            next_state <= S0; 
        endcase
    end

    // Banco de flip flops
    always @ (posedge clk or posedge reset) begin

        if (reset == 1)
            state <= S0;
        else
            state <= next_state;
    end
	initial state <= 4'b0000;
	
    // Nube combinacional para calcular las salidas
	 always @ (state) begin
        case (state)
            S0: begin 
	    	a <= 1'b0;
		b <= 1'b0;
		c <= 1'b0;
		d <= 1'b0;
		end
		
            S1: begin 
	    	a <= 1'b1;
		b <= 1'b0;
		c <= 1'b0;
		d <= 1'b0;
		end
		
	    S2: begin 
	        a <= 1'b1;
		b <= 1'b1;
		c <= 1'b0;
		d <= 1'b0;
		end 
		
	    S3: begin
	    	a <= 1'b1;
		b <= 1'b1;
		c <= 1'b1;
		d <= 1'b0;
		end
		
	    S4: begin
	    	a <= 1'b0;
		b <= 1'b0;
		c <= 1'b0;
		d <= 1'b0;
	   	end 
		
            default: begin
	    	a <= 1'b0;
		b <= 1'b0;
		c <= 1'b0;
		d <= 1'b0;
		end
        endcase
    end 

endmodule
