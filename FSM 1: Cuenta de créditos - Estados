module cuenta_creditos (input C, clk, reset, output reg a);
    reg [3:0] state, next_state;
    // Estados según la cantidad de créditos
    parameter S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010; S3= 4'b0011; S4= 4'b0100; S5= 4'b0101; S6= 4'b0110; 
    	      S7= 4'b0111; S9: 4'b1000; S8= 4'b1001; S10= 4'b1010;
    
    // Nube combinacional para calcular el estado futuro y salidas

    always @ (C or state) begin
        case (state)
            S0: begin
		    if (C == 1); 
                        next_state <= S1; 
		    else begin
                        next_state <= S0;
	            		    	 end
                end
		
            S1: begin
	     	    if (C == 1); 
                        next_state <= S2; 
		    else begin
                        next_state <= S1;
	            		    	 end
                end

            S2: begin
	     	    if (C == 1); 
                        next_state <= S3; 
		    else begin
                        next_state <= S2;
	            		    	 end
                end
		
	    S3: begin
	     	    if (C == 1); 
                        next_state <= S4; 
		    else begin
                        next_state <= S3;
	            		    	 end
                end
		
	    S4: begin
	     	    if (C == 1); 
                        next_state <= S5; 
		    else begin
                        next_state <= S4;
	            		    	 end
                end
		
	   S5: begin
	     	    if (C == 1); 
                        next_state <= S6; 
		    else begin
                        next_state <= S5;
	            		    	 end
                end
		
	   S6: begin
	     	    if (C == 1); 
                        next_state <= S7; 
		    else begin
                        next_state <= S6;
	            		    	 end
                end
		
	   S7: begin
	     	    if (C == 1); 
                        next_state <= S8; 
		    else begin
                        next_state <= S7;
	            		    	 end
                end
		
	   S8: begin
	     	    if (C == 1); 
                        next_state <= S9; 
		    else begin
                        next_state <= S8;
	            		    	 end
                end
		
	   S9: begin
	     	    if (C == 1); 
                        next_state <= S10; 
		    else begin
                        next_state <= S9;
	            		    	 end
                end
		
	   S10: begin
	     	    if (C == 1); 
                        next_state <= S0; 
                    end
		
            default: 
	            next_state <= S0; 
        endcase
    end

    // Banco de flip flops
    always @ (posedge clk or posedge reset) begin

        if (reset == 1)
            state <= S0;
        else
            state <= next_state;
    end
	initial state <= 4'b0000;
	
    // Nube combinacional para calcular las salidas
	 always @ (state) begin
        case (state)
            S0: a <= 4'b0000;
            S1: a <= 4'b0001;
	    S2: a <= 4'b0010;
	    S3: a <= 4'b0011;
	    S4: a <= 4'b0100;
	    S5: a <= 4'b0101;
	    S6: a <= 4'b0110;
	    S7: a <= 4'b0111;
	    S10: a <= 4'b1010;
            default: a <= 4'b0000;
        endcase
    end

endmodule
